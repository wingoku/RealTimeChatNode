#!/usr/bin/env node

/**
 * Module dependencies.
 */
console.log("www. requring app.js");
var appjs = require('../app');
console.log("NODE: www file require ");
var debug = require('debug')('RealTimeChatNodeJS:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
appjs.app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(appjs.app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var socket;
var io = require('socket.io').listen(server);
io.sockets.on('connection', function(sock){
  console.error('a user connected: '+ sock.id.toString());
  socket = sock;
  socket.on('sendMessageToServer', function(data) {
    appjs.indexjs.handleSockets('sendMessageToServer', data, sendMessageToClientBySockets);
    console.log("receved in www: "+ data);
  });

  socket.on('userInfo', function(data) {
    console.error("WWW.js socketID upon login: "+ data['sessionID'] + " userName: "+ data['requestedUserName']);
    var sessionIDInSocketServerFormat =  makeSessionIDComplientWithSocketServerFormat(data['sessionID']); // when we get the session id on server from a socket, it has /# in the begining. The sessionID provided by the client doesn't have this in the start. If we pass the sessoinID without /# appeneded in the begining, the server crashes when emit is called on the socket with this id
    var newData = {userName: data['userName'], sessionID:sessionIDInSocketServerFormat};

    appjs.indexjs.handleSockets('userInfo', newData, sendMessageToClientBySockets);
  });

  socket.on('chatRequest', function(data) {
    var sessionIDInSocketServerFormat =  makeSessionIDComplientWithSocketServerFormat(data['sessionID']);
    //var newData = {userName: data['requestedUserName'], sessionID:sessionIDInSocketServerFormat};
    console.error("WWW.js socketID upon login: "+ data['sessionID'] + " userName: "+ data['requestedUserName']);
    appjs.indexjs.handleSockets('chatRequest', data, sendMessageToClientBySockets);
  });

  socket.on('chatRequestAccepted', function(data) {
    console.log("WWW>JS chat RequestAccepted: ",{requester:data['requester'], result: 'accepted'});
    appjs.indexjs.handleSockets('chatRequestAccepted', {requester:data['requester'], result: 'accepted'}, sendMessageToClientBySockets);
  });

  socket.on('chatRequestRejected', function(data) {
    appjs.indexjs.handleSockets('chatRequestRejected', {requester:data['requester'], result: 'rejected'}, sendMessageToClientBySockets);
  });

});

function makeSessionIDComplientWithSocketServerFormat(clientSessionID) {
  console.error("sessionID: "+ clientSessionID);
  var normalizedSessionID = '/#'+clientSessionID;
  console.error('normalizedSessionID: '+ typeof(normalizedSessionID));
  return normalizedSessionID; // when we get the session id on server from a socket, it has /# in the begining. The sessionID provided by the client doesn't have this in the start. If we pass the sessoinID without /# appeneded in the begining, the server crashes when emit is called on the socket with this id
}

function sendMessageToClientBySockets(tag, data, shouldBroadcastToEveryone) {
    if(tag === 'chatRequestFromAUser') {
      console.error("chatRequestAtServer: ", data);
       io.sockets.connected[data['socketIdOfRequestedUser']].emit('userConnectionRequest', data['requester']);
    }
    else
    if(tag === 'chatRequestConfirmation') {
      io.sockets.connected[data['sessionID']].emit('chatRequestConfirmation', data['chatAccepted']);
    }
    else
      if(shouldBroadcastToEveryone) {
        io.sockets.emit(tag, data);
      }
      else {
        console.error("sending validation back: ", data);
        console.error("sessionID: "+ data['sessionID']);
        io.sockets.connected[data['sessionID']].emit(tag, data);
      }

}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

console.error("www.js required");